From 0508b70f88c71f1f309bedd3db4ed3e3c9dc2684 Mon Sep 17 00:00:00 2001
From: LencigGaer <unwi567@o2online.de>
Date: Thu, 25 Aug 2022 16:08:02 +0200
Subject: [PATCH] Added hop field registration server

---
 control/beaconing/extender.go              |  49 +++
 control/beaconing/grpc/BUILD.bazel         |   1 +
 control/beaconing/grpc/hopfields_sender.go |  46 +++
 control/cmd/control/main.go                |  12 +
 control/onehop/BUILD.bazel                 |   2 +
 control/tasks.go                           |  20 +-
 pkg/proto/control_plane/hopfields.pb.go    | 344 +++++++++++++++++++++
 pkg/segment/hop.go                         |  13 +
 private/env/env.go                         |   3 +
 proto/control_plane/v1/BUILD.bazel         |   1 +
 proto/control_plane/v1/hopfields.proto     |  27 ++
 11 files changed, 509 insertions(+), 9 deletions(-)
 create mode 100644 control/beaconing/grpc/hopfields_sender.go
 create mode 100644 pkg/proto/control_plane/hopfields.pb.go
 create mode 100644 proto/control_plane/v1/hopfields.proto

diff --git a/control/beaconing/extender.go b/control/beaconing/extender.go
index 2c02c5e35..b760ce90f 100644
--- a/control/beaconing/extender.go
+++ b/control/beaconing/extender.go
@@ -18,6 +18,7 @@ import (
 	"context"
 	"encoding/binary"
 	"hash"
+	"net"
 	"time"
 
 	"github.com/scionproto/scion/control/ifstate"
@@ -60,6 +61,45 @@ type DefaultExtender struct {
 	StaticInfo func() *StaticInfoCfg
 	// EPIC defines whether the EPIC authenticators should be added when the segment is extended.
 	EPIC bool
+    HopFieldsSender HopFieldsSender
+}
+
+type RPCHopFields interface {
+	SendHopFields(ctx context.Context, timestamp time.Time, segID uint16, hopField seg.HopField,
+		peerEntries []seg.PeerEntry, remote net.Addr) error
+}
+
+type HopFieldsSender struct {
+	Addr string
+	RPC  RPCHopFields
+}
+
+func (s *HopFieldsSender) Send(ctx context.Context, timestamp time.Time, segID uint16,
+	hopField seg.HopField, peerEntries []seg.PeerEntry) error {
+	if s.Addr == "" {
+		return serrors.New("no address configured")
+	}
+
+	address, err := net.ResolveUDPAddr("udp", s.Addr)
+	if err != nil {
+		return serrors.WrapStr("resolving address", err)
+	}
+
+	log.Debug("sending out hop fields")
+	err = s.RPC.SendHopFields(ctx, timestamp, segID, hopField, peerEntries, address)
+	if err != nil {
+		log.Debug("error", "error", err)
+		return serrors.WrapStr("sending hop fields", err)
+	}
+	return nil
+}
+
+func (s *DefaultExtender) registerHopFields(ctx context.Context, timestamp time.Time, segID uint16,
+	hopField seg.HopField, peerEntries []seg.PeerEntry) error {
+	log.Debug("register hop fields at hop fields registration server", "timestamp", timestamp,
+		"segID", segID, "hopField", hopField, "peerEntries", peerEntries)
+	s.HopFieldsSender.Send(ctx, timestamp, segID, hopField, peerEntries)
+	return nil
 }
 
 // Extend extends the beacon with hop fields of the old format.
@@ -105,6 +145,15 @@ func (s *DefaultExtender) Extend(
 		PeerEntries: peerEntries,
 		MTU:         int(s.MTU),
 	}
+
+	// Register hop fields at switch
+	if s.HopFieldsSender.Addr != "" {
+		err = s.registerHopFields(ctx, ts, extractBeta(pseg), hopEntry.HopField, peerEntries)
+		if err != nil {
+			return err
+		}
+	}
+
 	if static := s.StaticInfo(); static != nil {
 		asEntry.Extensions.StaticInfo = static.Generate(s.Intfs, ingress, egress)
 	}
diff --git a/control/beaconing/grpc/BUILD.bazel b/control/beaconing/grpc/BUILD.bazel
index ef8773add..1960af570 100644
--- a/control/beaconing/grpc/BUILD.bazel
+++ b/control/beaconing/grpc/BUILD.bazel
@@ -5,6 +5,7 @@ go_library(
     srcs = [
         "beacon_sender.go",
         "creation_server.go",
+        "hopfields_sender.go",
         "register.go",
     ],
     importpath = "github.com/scionproto/scion/control/beaconing/grpc",
diff --git a/control/beaconing/grpc/hopfields_sender.go b/control/beaconing/grpc/hopfields_sender.go
new file mode 100644
index 000000000..5b03d47f1
--- /dev/null
+++ b/control/beaconing/grpc/hopfields_sender.go
@@ -0,0 +1,46 @@
+package grpc
+
+import (
+	"context"
+	"net"
+	"time"
+
+	"github.com/scionproto/scion/pkg/segment"
+	"github.com/scionproto/scion/pkg/grpc"
+	cppb "github.com/scionproto/scion/pkg/proto/control_plane"
+)
+
+// HopFieldsSender propagates beacons.
+type HopFieldsSender struct {
+	// Dialer dials a new gRPC connection.
+	Dialer grpc.Dialer
+}
+
+// SendHopFields sends a beacon to the remote.
+func (r HopFieldsSender) SendHopFields(ctx context.Context, timestamp time.Time, segID uint16,
+	hopField segment.HopField, peerEntries []segment.PeerEntry, remote net.Addr) error {
+	peerHopFields := []*cppb.HopField{}
+	for _, p := range peerEntries {
+		peerHopFields = append(peerHopFields, segment.HopFieldToPB(&p.HopField))
+	}
+
+	// TODO include beta for peer entries
+
+	conn, err := r.Dialer.Dial(ctx, remote)
+	if err != nil {
+		return err
+	}
+	defer conn.Close()
+
+	client := cppb.NewHopFieldsRegistrationServiceClient(conn)
+	_, err = client.HopFieldsRegistration(ctx,
+		&cppb.HopFieldsRegistrationRequest{
+			Timestamp:     timestamp.Unix(),
+			SegmentId:     uint32(segID),
+			HopField:      segment.HopFieldToPB(&hopField),
+			PeerHopFields: peerHopFields,
+		},
+		grpc.RetryProfile...,
+	)
+	return err
+}
diff --git a/control/cmd/control/main.go b/control/cmd/control/main.go
index b5db65df9..15d46533a 100644
--- a/control/cmd/control/main.go
+++ b/control/cmd/control/main.go
@@ -189,6 +189,7 @@ func realMain(ctx context.Context) error {
 		},
 		Dialer: quicStack.Dialer,
 	}
+	simpleDialer := &libgrpc.SimpleDialer{}
 
 	trustDB, err := storage.NewTrustStorage(globalCfg.TrustDB)
 	if err != nil {
@@ -652,6 +653,16 @@ func realMain(ctx context.Context) error {
 		topoInfo := intf.TopoInfo()
 		return topoInfo.LinkType == topology.Core || topoInfo.LinkType == topology.Child
 	}
+	
+	log.Debug("globalCfg.General.HopFieldsRegistrationServer",
+		"globalCfg.General.HopFieldsRegistrationServer",
+		globalCfg.General.HopFieldsRegistrationServer)
+	hopFieldsSender := beaconing.HopFieldsSender{
+		Addr: globalCfg.General.HopFieldsRegistrationServer,
+		RPC: beaconinggrpc.HopFieldsSender{
+			Dialer: simpleDialer,
+		},
+	}
 
 	tasks, err := cs.StartTasks(cs.TasksConfig{
 		IA:            topo.IA(),
@@ -671,6 +682,7 @@ func realMain(ctx context.Context) error {
 		BeaconSenderFactory: &beaconinggrpc.BeaconSenderFactory{
 			Dialer: dialer,
 		},
+		HopFieldsSender: hopFieldsSender,
 		SegmentRegister: beaconinggrpc.Registrar{Dialer: dialer},
 		BeaconStore:     beaconStore,
 		Signer:          signer,
diff --git a/control/onehop/BUILD.bazel b/control/onehop/BUILD.bazel
index 0cd018e8a..4c51d1d1e 100644
--- a/control/onehop/BUILD.bazel
+++ b/control/onehop/BUILD.bazel
@@ -6,7 +6,9 @@ go_library(
     importpath = "github.com/scionproto/scion/control/onehop",
     visibility = ["//visibility:public"],
     deps = [
+        "//control/beaconing:go_default_library",
         "//pkg/addr:go_default_library",
+        "//pkg/slayers/path/onehop:go_default_library",
         "//pkg/snet:go_default_library",
         "//pkg/snet/path:go_default_library",
         "//private/app/appnet:go_default_library",
diff --git a/control/tasks.go b/control/tasks.go
index 9fb8de43a..96e7bd10a 100644
--- a/control/tasks.go
+++ b/control/tasks.go
@@ -53,6 +53,7 @@ type TasksConfig struct {
 	PathDB                pathdb.DB
 	RevCache              revcache.RevCache
 	BeaconSenderFactory   beaconing.SenderFactory
+	HopFieldsSender       beaconing.HopFieldsSender
 	SegmentRegister       beaconing.RPC
 	BeaconStore           Store
 	Signer                seg.Signer
@@ -200,15 +201,16 @@ func (t *TasksConfig) extender(task string, ia addr.IA, mtu uint16,
 	maxExp func() uint8) beaconing.Extender {
 
 	return &beaconing.DefaultExtender{
-		IA:         ia,
-		Signer:     t.Signer,
-		MAC:        t.MACGen,
-		Intfs:      t.AllInterfaces,
-		MTU:        mtu,
-		MaxExpTime: func() uint8 { return maxExp() },
-		StaticInfo: t.StaticInfo,
-		Task:       task,
-		EPIC:       t.EPIC,
+		IA:              ia,
+		Signer:          t.Signer,
+		MAC:             t.MACGen,
+		Intfs:           t.AllInterfaces,
+		MTU:             mtu,
+		MaxExpTime:      func() uint8 { return maxExp() },
+		StaticInfo:      t.StaticInfo,
+		Task:            task,
+		EPIC:            t.EPIC,
+		HopFieldsSender: t.HopFieldsSender,
 	}
 }
 
diff --git a/pkg/proto/control_plane/hopfields.pb.go b/pkg/proto/control_plane/hopfields.pb.go
new file mode 100644
index 000000000..c14674d98
--- /dev/null
+++ b/pkg/proto/control_plane/hopfields.pb.go
@@ -0,0 +1,344 @@
+// Code generated by protoc-gen-go. DO NOT EDIT.
+// versions:
+// 	protoc-gen-go v1.22.0
+// 	protoc        v3.11.4
+// source: proto/control_plane/v1/hopfields.proto
+
+package control_plane
+
+import (
+	context "context"
+	proto "github.com/golang/protobuf/proto"
+	grpc "google.golang.org/grpc"
+	codes "google.golang.org/grpc/codes"
+	status "google.golang.org/grpc/status"
+	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
+	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
+	reflect "reflect"
+	sync "sync"
+)
+
+const (
+	// Verify that this generated code is sufficiently up-to-date.
+	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
+	// Verify that runtime/protoimpl is sufficiently up-to-date.
+	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
+)
+
+// This is a compile-time assertion that a sufficiently up-to-date version
+// of the legacy proto package is being used.
+const _ = proto.ProtoPackageIsVersion4
+
+type HopFieldsRegistrationRequest struct {
+	state         protoimpl.MessageState
+	sizeCache     protoimpl.SizeCache
+	unknownFields protoimpl.UnknownFields
+
+	Timestamp     int64       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
+	SegmentId     uint32      `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
+	HopField      *HopField   `protobuf:"bytes,3,opt,name=hop_field,json=hopField,proto3" json:"hop_field,omitempty"`
+	PeerHopFields []*HopField `protobuf:"bytes,4,rep,name=peer_hop_fields,json=peerHopFields,proto3" json:"peer_hop_fields,omitempty"`
+}
+
+func (x *HopFieldsRegistrationRequest) Reset() {
+	*x = HopFieldsRegistrationRequest{}
+	if protoimpl.UnsafeEnabled {
+		mi := &file_proto_control_plane_v1_hopfields_proto_msgTypes[0]
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		ms.StoreMessageInfo(mi)
+	}
+}
+
+func (x *HopFieldsRegistrationRequest) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*HopFieldsRegistrationRequest) ProtoMessage() {}
+
+func (x *HopFieldsRegistrationRequest) ProtoReflect() protoreflect.Message {
+	mi := &file_proto_control_plane_v1_hopfields_proto_msgTypes[0]
+	if protoimpl.UnsafeEnabled && x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use HopFieldsRegistrationRequest.ProtoReflect.Descriptor instead.
+func (*HopFieldsRegistrationRequest) Descriptor() ([]byte, []int) {
+	return file_proto_control_plane_v1_hopfields_proto_rawDescGZIP(), []int{0}
+}
+
+func (x *HopFieldsRegistrationRequest) GetTimestamp() int64 {
+	if x != nil {
+		return x.Timestamp
+	}
+	return 0
+}
+
+func (x *HopFieldsRegistrationRequest) GetSegmentId() uint32 {
+	if x != nil {
+		return x.SegmentId
+	}
+	return 0
+}
+
+func (x *HopFieldsRegistrationRequest) GetHopField() *HopField {
+	if x != nil {
+		return x.HopField
+	}
+	return nil
+}
+
+func (x *HopFieldsRegistrationRequest) GetPeerHopFields() []*HopField {
+	if x != nil {
+		return x.PeerHopFields
+	}
+	return nil
+}
+
+type HopFieldsRegistrationResponse struct {
+	state         protoimpl.MessageState
+	sizeCache     protoimpl.SizeCache
+	unknownFields protoimpl.UnknownFields
+}
+
+func (x *HopFieldsRegistrationResponse) Reset() {
+	*x = HopFieldsRegistrationResponse{}
+	if protoimpl.UnsafeEnabled {
+		mi := &file_proto_control_plane_v1_hopfields_proto_msgTypes[1]
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		ms.StoreMessageInfo(mi)
+	}
+}
+
+func (x *HopFieldsRegistrationResponse) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*HopFieldsRegistrationResponse) ProtoMessage() {}
+
+func (x *HopFieldsRegistrationResponse) ProtoReflect() protoreflect.Message {
+	mi := &file_proto_control_plane_v1_hopfields_proto_msgTypes[1]
+	if protoimpl.UnsafeEnabled && x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use HopFieldsRegistrationResponse.ProtoReflect.Descriptor instead.
+func (*HopFieldsRegistrationResponse) Descriptor() ([]byte, []int) {
+	return file_proto_control_plane_v1_hopfields_proto_rawDescGZIP(), []int{1}
+}
+
+var File_proto_control_plane_v1_hopfields_proto protoreflect.FileDescriptor
+
+var file_proto_control_plane_v1_hopfields_proto_rawDesc = []byte{
+	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
+	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x70, 0x66, 0x69, 0x65, 0x6c,
+	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
+	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
+	0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
+	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x67, 0x2e, 0x70, 0x72, 0x6f,
+	0x74, 0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x1c, 0x48, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
+	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
+	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
+	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
+	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
+	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
+	0x12, 0x3d, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20,
+	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
+	0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x70,
+	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
+	0x48, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c,
+	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
+	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
+	0x31, 0x2e, 0x48, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72,
+	0x48, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x48, 0x6f, 0x70,
+	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
+	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa7, 0x01, 0x0a, 0x1c, 0x48,
+	0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
+	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x15,
+	0x48, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
+	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
+	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
+	0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
+	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72,
+	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
+	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
+	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
+	0x73, 0x65, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
+	0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63,
+	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
+	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x62, 0x06,
+	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
+}
+
+var (
+	file_proto_control_plane_v1_hopfields_proto_rawDescOnce sync.Once
+	file_proto_control_plane_v1_hopfields_proto_rawDescData = file_proto_control_plane_v1_hopfields_proto_rawDesc
+)
+
+func file_proto_control_plane_v1_hopfields_proto_rawDescGZIP() []byte {
+	file_proto_control_plane_v1_hopfields_proto_rawDescOnce.Do(func() {
+		file_proto_control_plane_v1_hopfields_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_control_plane_v1_hopfields_proto_rawDescData)
+	})
+	return file_proto_control_plane_v1_hopfields_proto_rawDescData
+}
+
+var file_proto_control_plane_v1_hopfields_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
+var file_proto_control_plane_v1_hopfields_proto_goTypes = []interface{}{
+	(*HopFieldsRegistrationRequest)(nil),  // 0: proto.control_plane.v1.HopFieldsRegistrationRequest
+	(*HopFieldsRegistrationResponse)(nil), // 1: proto.control_plane.v1.HopFieldsRegistrationResponse
+	(*HopField)(nil),                      // 2: proto.control_plane.v1.HopField
+}
+var file_proto_control_plane_v1_hopfields_proto_depIdxs = []int32{
+	2, // 0: proto.control_plane.v1.HopFieldsRegistrationRequest.hop_field:type_name -> proto.control_plane.v1.HopField
+	2, // 1: proto.control_plane.v1.HopFieldsRegistrationRequest.peer_hop_fields:type_name -> proto.control_plane.v1.HopField
+	0, // 2: proto.control_plane.v1.HopFieldsRegistrationService.HopFieldsRegistration:input_type -> proto.control_plane.v1.HopFieldsRegistrationRequest
+	1, // 3: proto.control_plane.v1.HopFieldsRegistrationService.HopFieldsRegistration:output_type -> proto.control_plane.v1.HopFieldsRegistrationResponse
+	3, // [3:4] is the sub-list for method output_type
+	2, // [2:3] is the sub-list for method input_type
+	2, // [2:2] is the sub-list for extension type_name
+	2, // [2:2] is the sub-list for extension extendee
+	0, // [0:2] is the sub-list for field type_name
+}
+
+func init() { file_proto_control_plane_v1_hopfields_proto_init() }
+func file_proto_control_plane_v1_hopfields_proto_init() {
+	if File_proto_control_plane_v1_hopfields_proto != nil {
+		return
+}
+	file_proto_control_plane_v1_seg_proto_init()
+	if !protoimpl.UnsafeEnabled {
+		file_proto_control_plane_v1_hopfields_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
+			switch v := v.(*HopFieldsRegistrationRequest); i {
+			case 0:
+				return &v.state
+			case 1:
+				return &v.sizeCache
+			case 2:
+				return &v.unknownFields
+			default:
+				return nil
+			}
+		}
+		file_proto_control_plane_v1_hopfields_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
+			switch v := v.(*HopFieldsRegistrationResponse); i {
+			case 0:
+				return &v.state
+			case 1:
+				return &v.sizeCache
+			case 2:
+				return &v.unknownFields
+			default:
+				return nil
+			}
+		}
+	}
+type x struct{}
+	out := protoimpl.TypeBuilder{
+		File: protoimpl.DescBuilder{
+		GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
+			RawDescriptor: file_proto_control_plane_v1_hopfields_proto_rawDesc,
+			NumEnums:      0,
+			NumMessages:   2,
+			NumExtensions: 0,
+			NumServices:   1,
+		},
+		GoTypes:           file_proto_control_plane_v1_hopfields_proto_goTypes,
+		DependencyIndexes: file_proto_control_plane_v1_hopfields_proto_depIdxs,
+		MessageInfos:      file_proto_control_plane_v1_hopfields_proto_msgTypes,
+	}.Build()
+	File_proto_control_plane_v1_hopfields_proto = out.File
+	file_proto_control_plane_v1_hopfields_proto_rawDesc = nil
+	file_proto_control_plane_v1_hopfields_proto_goTypes = nil
+	file_proto_control_plane_v1_hopfields_proto_depIdxs = nil
+}
+
+// Reference imports to suppress errors if they are not otherwise used.
+var _ context.Context
+var _ grpc.ClientConnInterface
+
+// This is a compile-time assertion to ensure that this generated file
+// is compatible with the grpc package it is being compiled against.
+const _ = grpc.SupportPackageIsVersion6
+
+// HopFieldsRegistrationServiceClient is the client API for HopFieldsRegistrationService service.
+//
+// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
+type HopFieldsRegistrationServiceClient interface {
+	HopFieldsRegistration(ctx context.Context, in *HopFieldsRegistrationRequest, opts ...grpc.CallOption) (*HopFieldsRegistrationResponse, error)
+}
+
+type hopFieldsRegistrationServiceClient struct {
+	cc grpc.ClientConnInterface
+}
+
+func NewHopFieldsRegistrationServiceClient(cc grpc.ClientConnInterface) HopFieldsRegistrationServiceClient {
+	return &hopFieldsRegistrationServiceClient{cc}
+}
+
+func (c *hopFieldsRegistrationServiceClient) HopFieldsRegistration(ctx context.Context, in *HopFieldsRegistrationRequest, opts ...grpc.CallOption) (*HopFieldsRegistrationResponse, error) {
+	out := new(HopFieldsRegistrationResponse)
+	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.HopFieldsRegistrationService/HopFieldsRegistration", in, out, opts...)
+	if err != nil {
+		return nil, err
+	}
+	return out, nil
+}
+
+// HopFieldsRegistrationServiceServer is the server API for HopFieldsRegistrationService service.
+ype HopFieldsRegistrationServiceServer interface {
+	HopFieldsRegistration(context.Context, *HopFieldsRegistrationRequest) (*HopFieldsRegistrationResponse, error)
+}
+
+// UnimplementedHopFieldsRegistrationServiceServer can be embedded to have forward compatible implementations.
+type UnimplementedHopFieldsRegistrationServiceServer struct {
+}
+
+func (*UnimplementedHopFieldsRegistrationServiceServer) HopFieldsRegistration(context.Context, *HopFieldsRegistrationRequest) (*HopFieldsRegistrationResponse, error) {
+	return nil, status.Errorf(codes.Unimplemented, "method HopFieldsRegistration not implemented")
+}
+
+func RegisterHopFieldsRegistrationServiceServer(s *grpc.Server, srv HopFieldsRegistrationServiceServer) {
+	s.RegisterService(&_HopFieldsRegistrationService_serviceDesc, srv)
+}
+
+func _HopFieldsRegistrationService_HopFieldsRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
+	in := new(HopFieldsRegistrationRequest)
+	if err := dec(in); err != nil {
+		return nil, err
+	}
+	if interceptor == nil {
+		return srv.(HopFieldsRegistrationServiceServer).HopFieldsRegistration(ctx, in)
+	}
+	info := &grpc.UnaryServerInfo{
+		Server:     srv,
+		FullMethod: "/proto.control_plane.v1.HopFieldsRegistrationService/HopFieldsRegistration",
+	}
+	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
+		return srv.(HopFieldsRegistrationServiceServer).HopFieldsRegistration(ctx, req.(*HopFieldsRegistrationRequest))
+	}
+	return interceptor(ctx, in, info, handler)
+}
+
+var _HopFieldsRegistrationService_serviceDesc = grpc.ServiceDesc{
+	ServiceName: "proto.control_plane.v1.HopFieldsRegistrationService",
+	HandlerType: (*HopFieldsRegistrationServiceServer)(nil),
+	Methods: []grpc.MethodDesc{
+		{
+			MethodName: "HopFieldsRegistration",
+			Handler:    _HopFieldsRegistrationService_HopFieldsRegistration_Handler,
+		},
+	},
+	Streams:  []grpc.StreamDesc{},
+	Metadata: "proto/control_plane/v1/hopfields.proto",
+}
diff --git a/pkg/segment/hop.go b/pkg/segment/hop.go
index da2423e51..d90d81b51 100644
--- a/pkg/segment/hop.go
+++ b/pkg/segment/hop.go
@@ -122,3 +122,16 @@ func hopFieldFromPB(pb *cppb.HopField) (HopField, error) {
 		MAC:         m,
 	}, nil
 }
+
+func HopFieldToPB(hf *HopField) *cppb.HopField {
+	if hf == nil {
+		panic("hop field must not be nil")
+	}
+
+	return &cppb.HopField{
+		Ingress: uint64(hf.ConsIngress),
+		Egress:  uint64(hf.ConsEgress),
+		ExpTime: uint32(hf.ExpTime),
+		Mac:     hf.MAC[:],
+	}
+}
diff --git a/private/env/env.go b/private/env/env.go
index 1c59a1822..a03eba8cb 100644
--- a/private/env/env.go
+++ b/private/env/env.go
@@ -82,6 +82,9 @@ type General struct {
 	// ReconnectToDispatcher can be set to true to enable transparent dispatcher
 	// reconnects.
 	ReconnectToDispatcher bool `toml:"reconnect_to_dispatcher,omitempty"`
+	// HopFieldsRegistrationServer is the address of the server to register the generated hop field
+	// for devices that cannot perform the required crypto themselves
+	HopFieldsRegistrationServer string `toml:"hop_fields_registration_server,omitempty"`
 }
 
 // InitDefaults sets the default value for Topology if not already set.
diff --git a/proto/control_plane/v1/BUILD.bazel b/proto/control_plane/v1/BUILD.bazel
index 7a0e59f88..e40d30f58 100644
--- a/proto/control_plane/v1/BUILD.bazel
+++ b/proto/control_plane/v1/BUILD.bazel
@@ -4,6 +4,7 @@ proto_library(
     name = "control_plane",
     srcs = [
         "cppki.proto",
+        "hopfields.proto",
         "drkey.proto",
         "renewal.proto",
         "seg.proto",
diff --git a/proto/control_plane/v1/hopfields.proto b/proto/control_plane/v1/hopfields.proto
new file mode 100644
index 000000000..a4d4b3020
--- /dev/null
+++ b/proto/control_plane/v1/hopfields.proto
@@ -0,0 +1,27 @@
+syntax = "proto3";
+
+option go_package = "github.com/scionproto/scion/go/pkg/proto/control_plane";
+
+package proto.control_plane.v1;
+
+import "proto/control_plane/v1/seg.proto";
+
+service HopFieldsRegistrationService {
+    // HopFieldsRegistration registers hop fields at the remote
+    rpc HopFieldsRegistration(HopFieldsRegistrationRequest) returns (HopFieldsRegistrationResponse) {}
+}
+
+message HopFieldsRegistrationRequest {
+    // Segment creation time set by the originating AS. Segment expiration time
+    // is computed relative to this timestamp. The timestamp is encoded as
+    // number of seconds elapsed since January 1, 1970 UTC.
+    int64 timestamp = 1;
+    // The 16-bit segment ID integer used for MAC computation.
+    uint32 segment_id = 2;
+    // The required regular hop entry.
+    HopField hop_field = 3;
+    // Optional peer entries.
+    repeated HopField peer_hop_fields = 4;
+}
+
+message HopFieldsRegistrationResponse {}
-- 
2.25.1

